openapi: 3.0.0
info:
  description: "This is a sample server Todo server."
  version: "1.0.0"
  title: "Todo"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: "/v1"
    description: Production server
tags:
- name: "task"
  description: "Everything about your Task"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
security:
  - BearerAuth: []
paths:
  /ping:
    get:
      operationId: default.ping
      security: []
      responses:
        "204":
          description: No content
  /login:
    post:
      operationId: user.login
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - username
              - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
        "400":
          description: Login failure
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "username or password is wrong"
  /logout:
    post:
      operationId: user.logout
      responses:
        "204":
          description: No content
  /users:
    post:
      tags:
      - user
      operationId: user.create_user
      security: []
      summary: Register new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - fullname
              - username
              - password
              properties:
                fullname:
                  type: string
                  minLength: 8
                  maxLength: 50
                username:
                  type: string
                  minLength: 8
                  maxLength: 30
                password:
                  type: string
                  minLength: 8
                  maxLength: 16
      responses:
        "201":
          description: "Create user success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int32
                    minimum: 1
        "400":
          description: Create user failure
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "username existed"
  /users/info:
    get:
      tags:
      - user
      operationId: user.get_user_info
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  fullname:
                    type: string
                  created_at:
                    type: string
                    format: date-time
                  updated_at:
                    type: string
                    format: date-time
                    nullable: true
        "400":
          description: User not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not exist
  /tasks:
    get:
      tags:
      - task
      summary: Get task list
      operationId: task.get_tasks
      parameters:
      - in: query
        name: page
        schema:
          type: integer
      - in: query
        name: page_size
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_item:
                    type: integer
                  page:
                    type: integer
                  page_size:
                    type: integer
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        title:
                          type: string
                        description:
                          type: string
                        status:
                          type: string
                          enum:
                          - new
                          - doing
                          - done
                          - failure
                        created_at:
                          type: string
                          format: date-time
                        updated_at:
                          type: string
                          format: date-time
        "400":
          description: Failure
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Task not exist
    post:
      tags:
      - task
      summary: Create new task
      operationId: task.create_task
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - title
              properties:
                title:
                  type: string
                  minLength: 5
                  maxLength: 50
                description:
                  type: string
                  nullable: true
                  maxLength: 255
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
          links:
            GetTaskById:
              operationId: task.get_task
              parameters:
                task_id: '$response.body#/id'
        "400":
          description: "Create failure"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Title existed"
  /tasks/{task_id}:
    get:
      tags:
      - task
      operationId: task.get_task
      parameters:
      - in: path
        name: task_id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  description:
                    type: string
                    nullable: true
                  status:
                    type: string
                    enum:
                    - new
                    - doing
                    - done
                    - failure
                  created_at:
                    type: string
                    format: date-time
                  updated_at:
                    type: string
                    format: date-time
        "403":
          description: Forbidden
        "404":
          description: Not Found
    patch:
      tags:
      - task
      summary: Update task
      operationId: task.update_task
      parameters:
      - in: path
        name: task_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 5
                  maxLength: 50
                description:
                  type: string
                  nullable: true
                  maxLength: 255
                status:
                  type: string
                  enum:
                  - new
                  - doing
                  - done
                  - failure
      responses:
        "204":
          description: No content
        "400":
          description: "Update failure"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task not found"
    delete:
      tags:
      - task
      summary: Delete task
      operationId: task.delete_task
      parameters:
      - in: path
        name: task_id
        required: true
        schema:
          type: integer
      responses:
        "204":
          description: No content
        "400":
          description: "Delete failure"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task not found"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: app.services.auth.auth_fn
